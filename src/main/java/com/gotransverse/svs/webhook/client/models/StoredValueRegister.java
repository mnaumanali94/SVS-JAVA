/*
 * SVSLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/15/2016
 */
package com.gotransverse.svs.webhook.client.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class StoredValueRegister 
        implements java.io.Serializable {
    private static final long serialVersionUID = 5713282187667978827L;
    private String uuid;
    private String name;
    private GrantedUnitOfMeasureEnum grantedUnitOfMeasure;
    private CurrencyEnum currency = CurrencyEnum.USD;
    private String description;
    private String externalAccountId;
    private String externalAccountNumber;
    private String externalAccountName;
    private String externalCompanyName;
    private String externalCategory;
    private Double overdraftAmount;
    private Boolean autoContributionEnabled;
    private Double autoContributionThreshold;
    private Double autoContributionAmount;
    private Double autoContributionGrantedValue;
    private Long autoContributionProductEid;
    private String registerType;
    private TimezoneEnum timezoneName = TimezoneEnum.ENUM_AMERICA/CHICAGO;
    /** GETTER
     * The globally unique identifier for the register.  Generated by service if not passed in.
     */
    @JsonGetter("uuid")
    public String getUuid ( ) { 
        return this.uuid;
    }
    
    /** SETTER
     * The globally unique identifier for the register.  Generated by service if not passed in.
     */
    @JsonSetter("uuid")
    public void setUuid (String value) { 
        this.uuid = value;
    }
 
    /** GETTER
     * An optional name for this register.
     */
    @JsonGetter("name")
    public String getName ( ) { 
        return this.name;
    }
    
    /** SETTER
     * An optional name for this register.
     */
    @JsonSetter("name")
    public void setName (String value) { 
        this.name = value;
    }
 
    /** GETTER
     * The unit of measure for which the register is tracking value.  Can only be updated if there are no transactions for this register.
     */
    @JsonGetter("granted_unit_of_measure")
    public GrantedUnitOfMeasureEnum getGrantedUnitOfMeasure ( ) { 
        return this.grantedUnitOfMeasure;
    }
    
    /** SETTER
     * The unit of measure for which the register is tracking value.  Can only be updated if there are no transactions for this register.
     */
    @JsonSetter("granted_unit_of_measure")
    public void setGrantedUnitOfMeasure (GrantedUnitOfMeasureEnum value) { 
        this.grantedUnitOfMeasure = value;
    }
 
    /** GETTER
     * The currency code based upon ISO 4217
     */
    @JsonGetter("currency")
    public CurrencyEnum getCurrency ( ) { 
        return this.currency;
    }
    
    /** SETTER
     * The currency code based upon ISO 4217
     */
    @JsonSetter("currency")
    public void setCurrency (CurrencyEnum value) { 
        this.currency = value;
    }
 
    /** GETTER
     * An optional description for this register.
     */
    @JsonGetter("description")
    public String getDescription ( ) { 
        return this.description;
    }
    
    /** SETTER
     * An optional description for this register.
     */
    @JsonSetter("description")
    public void setDescription (String value) { 
        this.description = value;
    }
 
    /** GETTER
     * An optional external account id for this register for cross referencing purposes.
     */
    @JsonGetter("external_account_id")
    public String getExternalAccountId ( ) { 
        return this.externalAccountId;
    }
    
    /** SETTER
     * An optional external account id for this register for cross referencing purposes.
     */
    @JsonSetter("external_account_id")
    public void setExternalAccountId (String value) { 
        this.externalAccountId = value;
    }
 
    /** GETTER
     * An optional external account number for this register for cross referencing purposes.
     */
    @JsonGetter("external_account_number")
    public String getExternalAccountNumber ( ) { 
        return this.externalAccountNumber;
    }
    
    /** SETTER
     * An optional external account number for this register for cross referencing purposes.
     */
    @JsonSetter("external_account_number")
    public void setExternalAccountNumber (String value) { 
        this.externalAccountNumber = value;
    }
 
    /** GETTER
     * An optional external account name for this register for cross referencing purposes.
     */
    @JsonGetter("external_account_name")
    public String getExternalAccountName ( ) { 
        return this.externalAccountName;
    }
    
    /** SETTER
     * An optional external account name for this register for cross referencing purposes.
     */
    @JsonSetter("external_account_name")
    public void setExternalAccountName (String value) { 
        this.externalAccountName = value;
    }
 
    /** GETTER
     * An optional external company name for this register for cross referencing purposes.
     */
    @JsonGetter("external_company_name")
    public String getExternalCompanyName ( ) { 
        return this.externalCompanyName;
    }
    
    /** SETTER
     * An optional external company name for this register for cross referencing purposes.
     */
    @JsonSetter("external_company_name")
    public void setExternalCompanyName (String value) { 
        this.externalCompanyName = value;
    }
 
    /** GETTER
     * An optional external category for this register for cross referencing purposes.
     */
    @JsonGetter("external_category")
    public String getExternalCategory ( ) { 
        return this.externalCategory;
    }
    
    /** SETTER
     * An optional external category for this register for cross referencing purposes.
     */
    @JsonSetter("external_category")
    public void setExternalCategory (String value) { 
        this.externalCategory = value;
    }
 
    /** GETTER
     * An optional amount this register can be overdrawn.
     */
    @JsonGetter("overdraft_amount")
    public Double getOverdraftAmount ( ) { 
        return this.overdraftAmount;
    }
    
    /** SETTER
     * An optional amount this register can be overdrawn.
     */
    @JsonSetter("overdraft_amount")
    public void setOverdraftAmount (Double value) { 
        this.overdraftAmount = value;
    }
 
    /** GETTER
     * Indicates if automatic contribution is enabled for this register.
     */
    @JsonGetter("auto_contribution_enabled")
    public Boolean getAutoContributionEnabled ( ) { 
        return this.autoContributionEnabled;
    }
    
    /** SETTER
     * Indicates if automatic contribution is enabled for this register.
     */
    @JsonSetter("auto_contribution_enabled")
    public void setAutoContributionEnabled (Boolean value) { 
        this.autoContributionEnabled = value;
    }
 
    /** GETTER
     * A balance level at which to trigger an automatic contribution.
     */
    @JsonGetter("auto_contribution_threshold")
    public Double getAutoContributionThreshold ( ) { 
        return this.autoContributionThreshold;
    }
    
    /** SETTER
     * A balance level at which to trigger an automatic contribution.
     */
    @JsonSetter("auto_contribution_threshold")
    public void setAutoContributionThreshold (Double value) { 
        this.autoContributionThreshold = value;
    }
 
    /** GETTER
     * The amount to add on an automatic contribution.
     */
    @JsonGetter("auto_contribution_amount")
    public Double getAutoContributionAmount ( ) { 
        return this.autoContributionAmount;
    }
    
    /** SETTER
     * The amount to add on an automatic contribution.
     */
    @JsonSetter("auto_contribution_amount")
    public void setAutoContributionAmount (Double value) { 
        this.autoContributionAmount = value;
    }
 
    /** GETTER
     * The granted value to add on an automatic contribution.
     */
    @JsonGetter("auto_contribution_granted_value")
    public Double getAutoContributionGrantedValue ( ) { 
        return this.autoContributionGrantedValue;
    }
    
    /** SETTER
     * The granted value to add on an automatic contribution.
     */
    @JsonSetter("auto_contribution_granted_value")
    public void setAutoContributionGrantedValue (Double value) { 
        this.autoContributionGrantedValue = value;
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("auto_contribution_product_eid")
    public Long getAutoContributionProductEid ( ) { 
        return this.autoContributionProductEid;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("auto_contribution_product_eid")
    public void setAutoContributionProductEid (Long value) { 
        this.autoContributionProductEid = value;
    }
 
    /** GETTER
     * The type of this register.  Used to differentiate between multiple registers that might be on a given external account.
     */
    @JsonGetter("register_type")
    public String getRegisterType ( ) { 
        return this.registerType;
    }
    
    /** SETTER
     * The type of this register.  Used to differentiate between multiple registers that might be on a given external account.
     */
    @JsonSetter("register_type")
    public void setRegisterType (String value) { 
        this.registerType = value;
    }
 
    /** GETTER
     * A timezone name per the official tz database.
     */
    @JsonGetter("timezone_name")
    public TimezoneEnum getTimezoneName ( ) { 
        return this.timezoneName;
    }
    
    /** SETTER
     * A timezone name per the official tz database.
     */
    @JsonSetter("timezone_name")
    public void setTimezoneName (TimezoneEnum value) { 
        this.timezoneName = value;
    }
 
}
 