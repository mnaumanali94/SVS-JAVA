/*
 * SVSLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/15/2016
 */
package com.gotransverse.svs.webhook.client.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class ExportRegisterWeightedConsumptionBySource 
        implements java.io.Serializable {
    private static final long serialVersionUID = 4919083789593247642L;
    private String uuid;
    private AllocationTypeEnum allocationType;
    private Long registerId;
    private String registerType;
    private CurrencyEnum registerCurrency = CurrencyEnum.USD;
    private String registerUom;
    private Long registerAccountId;
    private String registerAccountNumber;
    private String sourceId;
    private String sourceType;
    private String sourceCategory;
    private Double dailyConsumptionValue;
    private Double dailyWeightedOrderConsumptionAmount;
    private Double dailyWeightedListConsumptionAmount;
    private Long dailyConsumptionCount;
    private Date asOfDate;
    /** GETTER
     * A unique identifier for this record.
     */
    @JsonGetter("uuid")
    public String getUuid ( ) { 
        return this.uuid;
    }
    
    /** SETTER
     * A unique identifier for this record.
     */
    @JsonSetter("uuid")
    public void setUuid (String value) { 
        this.uuid = value;
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("allocation_type")
    public AllocationTypeEnum getAllocationType ( ) { 
        return this.allocationType;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("allocation_type")
    public void setAllocationType (AllocationTypeEnum value) { 
        this.allocationType = value;
    }
 
    /** GETTER
     * The internal register id for the register.
     */
    @JsonGetter("register_id")
    public Long getRegisterId ( ) { 
        return this.registerId;
    }
    
    /** SETTER
     * The internal register id for the register.
     */
    @JsonSetter("register_id")
    public void setRegisterId (Long value) { 
        this.registerId = value;
    }
 
    /** GETTER
     * The register type per the initial register setup.
     */
    @JsonGetter("register_type")
    public String getRegisterType ( ) { 
        return this.registerType;
    }
    
    /** SETTER
     * The register type per the initial register setup.
     */
    @JsonSetter("register_type")
    public void setRegisterType (String value) { 
        this.registerType = value;
    }
 
    /** GETTER
     * The currency code based upon ISO 4217
     */
    @JsonGetter("register_currency")
    public CurrencyEnum getRegisterCurrency ( ) { 
        return this.registerCurrency;
    }
    
    /** SETTER
     * The currency code based upon ISO 4217
     */
    @JsonSetter("register_currency")
    public void setRegisterCurrency (CurrencyEnum value) { 
        this.registerCurrency = value;
    }
 
    /** GETTER
     * The register's unit of measure
     */
    @JsonGetter("register_uom")
    public String getRegisterUom ( ) { 
        return this.registerUom;
    }
    
    /** SETTER
     * The register's unit of measure
     */
    @JsonSetter("register_uom")
    public void setRegisterUom (String value) { 
        this.registerUom = value;
    }
 
    /** GETTER
     * The register's external account id.
     */
    @JsonGetter("register_account_id")
    public Long getRegisterAccountId ( ) { 
        return this.registerAccountId;
    }
    
    /** SETTER
     * The register's external account id.
     */
    @JsonSetter("register_account_id")
    public void setRegisterAccountId (Long value) { 
        this.registerAccountId = value;
    }
 
    /** GETTER
     * The register's external account number.
     */
    @JsonGetter("register_account_number")
    public String getRegisterAccountNumber ( ) { 
        return this.registerAccountNumber;
    }
    
    /** SETTER
     * The register's external account number.
     */
    @JsonSetter("register_account_number")
    public void setRegisterAccountNumber (String value) { 
        this.registerAccountNumber = value;
    }
 
    /** GETTER
     * The service_id that is consuming from the balance.
     */
    @JsonGetter("source_id")
    public String getSourceId ( ) { 
        return this.sourceId;
    }
    
    /** SETTER
     * The service_id that is consuming from the balance.
     */
    @JsonSetter("source_id")
    public void setSourceId (String value) { 
        this.sourceId = value;
    }
 
    /** GETTER
     * The type of transaction consuming from the balance.
     */
    @JsonGetter("source_type")
    public String getSourceType ( ) { 
        return this.sourceType;
    }
    
    /** SETTER
     * The type of transaction consuming from the balance.
     */
    @JsonSetter("source_type")
    public void setSourceType (String value) { 
        this.sourceType = value;
    }
 
    /** GETTER
     * The category of the transaction consuming from the balance.
     */
    @JsonGetter("source_category")
    public String getSourceCategory ( ) { 
        return this.sourceCategory;
    }
    
    /** SETTER
     * The category of the transaction consuming from the balance.
     */
    @JsonSetter("source_category")
    public void setSourceCategory (String value) { 
        this.sourceCategory = value;
    }
 
    /** GETTER
     * The total value of consumptions for the register for the day
     */
    @JsonGetter("daily_consumption_value")
    public Double getDailyConsumptionValue ( ) { 
        return this.dailyConsumptionValue;
    }
    
    /** SETTER
     * The total value of consumptions for the register for the day
     */
    @JsonSetter("daily_consumption_value")
    public void setDailyConsumptionValue (Double value) { 
        this.dailyConsumptionValue = value;
    }
 
    /** GETTER
     * The total weighted conumption based upon the orderd amount of the contributions consumed against.
     */
    @JsonGetter("daily_weighted_order_consumption_amount")
    public Double getDailyWeightedOrderConsumptionAmount ( ) { 
        return this.dailyWeightedOrderConsumptionAmount;
    }
    
    /** SETTER
     * The total weighted conumption based upon the orderd amount of the contributions consumed against.
     */
    @JsonSetter("daily_weighted_order_consumption_amount")
    public void setDailyWeightedOrderConsumptionAmount (Double value) { 
        this.dailyWeightedOrderConsumptionAmount = value;
    }
 
    /** GETTER
     * The total weighted consumption based upon the listed amount of the contributions consumed against.
     */
    @JsonGetter("daily_weighted_list_consumption_amount")
    public Double getDailyWeightedListConsumptionAmount ( ) { 
        return this.dailyWeightedListConsumptionAmount;
    }
    
    /** SETTER
     * The total weighted consumption based upon the listed amount of the contributions consumed against.
     */
    @JsonSetter("daily_weighted_list_consumption_amount")
    public void setDailyWeightedListConsumptionAmount (Double value) { 
        this.dailyWeightedListConsumptionAmount = value;
    }
 
    /** GETTER
     * The total count of consumptions for the register for the day.
     */
    @JsonGetter("daily_consumption_count")
    public Long getDailyConsumptionCount ( ) { 
        return this.dailyConsumptionCount;
    }
    
    /** SETTER
     * The total count of consumptions for the register for the day.
     */
    @JsonSetter("daily_consumption_count")
    public void setDailyConsumptionCount (Long value) { 
        this.dailyConsumptionCount = value;
    }
 
    /** GETTER
     * The allocation date based upon the business entity's timezone in YYYY-MM-DD format.
     */
    @JsonGetter("as_of_date")
    public Date getAsOfDate ( ) { 
        return this.asOfDate;
    }
    
    /** SETTER
     * The allocation date based upon the business entity's timezone in YYYY-MM-DD format.
     */
    @JsonSetter("as_of_date")
    public void setAsOfDate (Date value) { 
        this.asOfDate = value;
    }
 
}
 