/*
 * SVSLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/15/2016
 */
package com.gotransverse.svs.webhook.client.models;

import java.util.*;

public class ExportRegisterWeightedConsumptionBySourceBuilder {
    //the instance to build
    private ExportRegisterWeightedConsumptionBySource exportRegisterWeightedConsumptionBySource;

    /**
     * Default constructor to initialize the instance
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder() {
        exportRegisterWeightedConsumptionBySource = new ExportRegisterWeightedConsumptionBySource();
    }

    /**
     * A unique identifier for this record.
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder uuid(String uuid) {
        exportRegisterWeightedConsumptionBySource.setUuid(uuid);
        return this;
    }

    public ExportRegisterWeightedConsumptionBySourceBuilder allocationType(AllocationTypeEnum allocationType) {
        exportRegisterWeightedConsumptionBySource.setAllocationType(allocationType);
        return this;
    }

    /**
     * The internal register id for the register.
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder registerId(Long registerId) {
        exportRegisterWeightedConsumptionBySource.setRegisterId(registerId);
        return this;
    }

    /**
     * The register type per the initial register setup.
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder registerType(String registerType) {
        exportRegisterWeightedConsumptionBySource.setRegisterType(registerType);
        return this;
    }

    /**
     * The currency code based upon ISO 4217
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder registerCurrency(CurrencyEnum registerCurrency) {
        exportRegisterWeightedConsumptionBySource.setRegisterCurrency(registerCurrency);
        return this;
    }

    /**
     * The register's unit of measure
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder registerUom(String registerUom) {
        exportRegisterWeightedConsumptionBySource.setRegisterUom(registerUom);
        return this;
    }

    /**
     * The register's external account id.
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder registerAccountId(Long registerAccountId) {
        exportRegisterWeightedConsumptionBySource.setRegisterAccountId(registerAccountId);
        return this;
    }

    /**
     * The register's external account number.
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder registerAccountNumber(String registerAccountNumber) {
        exportRegisterWeightedConsumptionBySource.setRegisterAccountNumber(registerAccountNumber);
        return this;
    }

    /**
     * The service_id that is consuming from the balance.
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder sourceId(String sourceId) {
        exportRegisterWeightedConsumptionBySource.setSourceId(sourceId);
        return this;
    }

    /**
     * The type of transaction consuming from the balance.
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder sourceType(String sourceType) {
        exportRegisterWeightedConsumptionBySource.setSourceType(sourceType);
        return this;
    }

    /**
     * The category of the transaction consuming from the balance.
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder sourceCategory(String sourceCategory) {
        exportRegisterWeightedConsumptionBySource.setSourceCategory(sourceCategory);
        return this;
    }

    /**
     * The total value of consumptions for the register for the day
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder dailyConsumptionValue(Double dailyConsumptionValue) {
        exportRegisterWeightedConsumptionBySource.setDailyConsumptionValue(dailyConsumptionValue);
        return this;
    }

    /**
     * The total weighted conumption based upon the orderd amount of the contributions consumed against.
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder dailyWeightedOrderConsumptionAmount(Double dailyWeightedOrderConsumptionAmount) {
        exportRegisterWeightedConsumptionBySource.setDailyWeightedOrderConsumptionAmount(dailyWeightedOrderConsumptionAmount);
        return this;
    }

    /**
     * The total weighted consumption based upon the listed amount of the contributions consumed against.
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder dailyWeightedListConsumptionAmount(Double dailyWeightedListConsumptionAmount) {
        exportRegisterWeightedConsumptionBySource.setDailyWeightedListConsumptionAmount(dailyWeightedListConsumptionAmount);
        return this;
    }

    /**
     * The total count of consumptions for the register for the day.
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder dailyConsumptionCount(Long dailyConsumptionCount) {
        exportRegisterWeightedConsumptionBySource.setDailyConsumptionCount(dailyConsumptionCount);
        return this;
    }

    /**
     * The allocation date based upon the business entity's timezone in YYYY-MM-DD format.
     */
    public ExportRegisterWeightedConsumptionBySourceBuilder asOfDate(Date asOfDate) {
        exportRegisterWeightedConsumptionBySource.setAsOfDate(asOfDate);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public ExportRegisterWeightedConsumptionBySource build() {
        return exportRegisterWeightedConsumptionBySource;
    }
}