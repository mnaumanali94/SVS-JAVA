/*
 * SVSLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/15/2016
 */
package com.gotransverse.svs.webhook.client.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.gotransverse.svs.webhook.client.*;
import com.gotransverse.svs.webhook.client.models.*;
import com.gotransverse.svs.webhook.client.exceptions.*;
import com.gotransverse.svs.webhook.client.http.client.HttpClient;
import com.gotransverse.svs.webhook.client.http.client.HttpContext;
import com.gotransverse.svs.webhook.client.http.request.HttpRequest;
import com.gotransverse.svs.webhook.client.http.response.HttpResponse;
import com.gotransverse.svs.webhook.client.http.response.HttpStringResponse;
import com.gotransverse.svs.webhook.client.http.client.APICallBack;
import com.gotransverse.svs.webhook.client.controllers.syncwrapper.APICallBackCatcher;

public class RegisterManagementController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static RegisterManagementController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the RegisterManagementController class 
     */
    public static RegisterManagementController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new RegisterManagementController();
            }
        }
        return instance;
    }

    /**
     * Gets the current balance of one or more registers by external account number
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register.
     * @param    externalNumber    Required parameter: The external account id associated with the register
     * @return    Returns the List<RegisterBalance> response from the API call 
     */
    public List<RegisterBalance> getStoreExternalAccountNumberBalance(
                final String authorization,
                final String storeId,
                final String externalNumber
    ) throws Throwable {
        APICallBackCatcher<List<RegisterBalance>> callback = new APICallBackCatcher<List<RegisterBalance>>();
        getStoreExternalAccountNumberBalanceAsync(authorization, storeId, externalNumber, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Gets the current balance of one or more registers by external account number
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register.
     * @param    externalNumber    Required parameter: The external account id associated with the register
     * @return    Returns the void response from the API call 
     */
    public void getStoreExternalAccountNumberBalanceAsync(
                final String authorization,
                final String storeId,
                final String externalNumber,
                final APICallBack<List<RegisterBalance>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/external-account-number/{external-number}/balance");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5525299991929608339L;
            {
                    put( "store-id", storeId );
                    put( "external-number", externalNumber );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5423460287585804012L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<RegisterBalance> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<RegisterBalance>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Creates a new balance register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that is creating the register.
     * @param    register    Required parameter: Example: 
     * @return    Returns the StoredValueRegister response from the API call 
     */
    public StoredValueRegister createStoreRegisterByStoreId(
                final String authorization,
                final String storeId,
                final StoredValueRegister register
    ) throws Throwable {
        APICallBackCatcher<StoredValueRegister> callback = new APICallBackCatcher<StoredValueRegister>();
        createStoreRegisterByStoreIdAsync(authorization, storeId, register, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Creates a new balance register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that is creating the register.
     * @param    register    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createStoreRegisterByStoreIdAsync(
                final String authorization,
                final String storeId,
                final StoredValueRegister register,
                final APICallBack<StoredValueRegister> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/register");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4701987286305105856L;
            {
                    put( "store-id", storeId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5029262354190739945L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(register));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            StoredValueRegister _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<StoredValueRegister>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieves a stored value register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register.
     * @param    registerId    Required parameter: The uuid of the register being retrieved
     * @return    Returns the StoredValueRegister response from the API call 
     */
    public StoredValueRegister getStoreRegisterByStoreIdAndRegisterId(
                final String authorization,
                final String storeId,
                final String registerId
    ) throws Throwable {
        APICallBackCatcher<StoredValueRegister> callback = new APICallBackCatcher<StoredValueRegister>();
        getStoreRegisterByStoreIdAndRegisterIdAsync(authorization, storeId, registerId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieves a stored value register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register.
     * @param    registerId    Required parameter: The uuid of the register being retrieved
     * @return    Returns the void response from the API call 
     */
    public void getStoreRegisterByStoreIdAndRegisterIdAsync(
                final String authorization,
                final String storeId,
                final String registerId,
                final APICallBack<StoredValueRegister> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/register/{register-id}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5094288188889508671L;
            {
                    put( "store-id", storeId );
                    put( "register-id", registerId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5361956147966217980L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            StoredValueRegister _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<StoredValueRegister>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Forces an allocation on a register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register
     * @param    registerId    Required parameter: The uuid of the register
     * @return    Returns the RegisterBalance response from the API call 
     */
    public RegisterBalance createStoreRegisterAllocateByStoreId(
                final String authorization,
                final String storeId,
                final String registerId
    ) throws Throwable {
        APICallBackCatcher<RegisterBalance> callback = new APICallBackCatcher<RegisterBalance>();
        createStoreRegisterAllocateByStoreIdAsync(authorization, storeId, registerId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Forces an allocation on a register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register
     * @param    registerId    Required parameter: The uuid of the register
     * @return    Returns the void response from the API call 
     */
    public void createStoreRegisterAllocateByStoreIdAsync(
                final String authorization,
                final String storeId,
                final String registerId,
                final APICallBack<RegisterBalance> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/register/{register-id}/allocate");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5410869084876911557L;
            {
                    put( "store-id", storeId );
                    put( "register-id", registerId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5228602452617390969L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RegisterBalance _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RegisterBalance>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Gets the current balance of a register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register.
     * @param    registerId    Required parameter: The uuid of the register
     * @return    Returns the RegisterBalance response from the API call 
     */
    public RegisterBalance getStoreRegisterBalanceByStoreId(
                final String authorization,
                final String storeId,
                final String registerId
    ) throws Throwable {
        APICallBackCatcher<RegisterBalance> callback = new APICallBackCatcher<RegisterBalance>();
        getStoreRegisterBalanceByStoreIdAsync(authorization, storeId, registerId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Gets the current balance of a register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register.
     * @param    registerId    Required parameter: The uuid of the register
     * @return    Returns the void response from the API call 
     */
    public void getStoreRegisterBalanceByStoreIdAsync(
                final String authorization,
                final String storeId,
                final String registerId,
                final APICallBack<RegisterBalance> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/register/{register-id}/balance");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4660894212673788201L;
            {
                    put( "store-id", storeId );
                    put( "register-id", registerId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5684637828706493691L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RegisterBalance _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RegisterBalance>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Tests a connection to the stored value server
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid for the store
     * @return    Returns the void response from the API call 
     */
    public void getStoreTestConnectionByStoreId(
                final String authorization,
                final String storeId
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        getStoreTestConnectionByStoreIdAsync(authorization, storeId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * Tests a connection to the stored value server
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid for the store
     * @return    Returns the void response from the API call 
     */
    public void getStoreTestConnectionByStoreIdAsync(
                final String authorization,
                final String storeId,
                final APICallBack<Object> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/test-connection");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5213157063896440062L;
            {
                    put( "store-id", storeId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5646434696075666294L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Adds one or more consumption transactions to a register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register
     * @param    registerId    Required parameter: The uuid of the register
     * @param    consumption    Required parameter: The consumption transactions to post to the register
     * @return    Returns the void response from the API call 
     */
    public void createStoreRegisterConsumeByStoreId(
                final String authorization,
                final String storeId,
                final String registerId,
                final List<StoredValueConsumption> consumption
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        createStoreRegisterConsumeByStoreIdAsync(authorization, storeId, registerId, consumption, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * Adds one or more consumption transactions to a register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register
     * @param    registerId    Required parameter: The uuid of the register
     * @param    consumption    Required parameter: The consumption transactions to post to the register
     * @return    Returns the void response from the API call 
     */
    public void createStoreRegisterConsumeByStoreIdAsync(
                final String authorization,
                final String storeId,
                final String registerId,
                final List<StoredValueConsumption> consumption,
                final APICallBack<Object> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/register/{register-id}/consume");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5673555216096362828L;
            {
                    put( "store-id", storeId );
                    put( "register-id", registerId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4675024935163524562L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(consumption));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Adds one or more contribution transactions to a register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register
     * @param    registerId    Required parameter: The uuid of the register
     * @param    contribution    Required parameter: The contribution transactions to post to the register
     * @return    Returns the void response from the API call 
     */
    public void createStoreRegisterContributeByStoreId(
                final String authorization,
                final String storeId,
                final String registerId,
                final List<StoredValueContribution> contribution
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        createStoreRegisterContributeByStoreIdAsync(authorization, storeId, registerId, contribution, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * Adds one or more contribution transactions to a register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register
     * @param    registerId    Required parameter: The uuid of the register
     * @param    contribution    Required parameter: The contribution transactions to post to the register
     * @return    Returns the void response from the API call 
     */
    public void createStoreRegisterContributeByStoreIdAsync(
                final String authorization,
                final String storeId,
                final String registerId,
                final List<StoredValueContribution> contribution,
                final APICallBack<Object> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/register/{register-id}/contribute");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5423643009918353384L;
            {
                    put( "store-id", storeId );
                    put( "register-id", registerId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5050265719455297065L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(contribution));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Gets a paged, filtered, sorted list of aggregated daily transactions for a register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register
     * @param    registerId    Required parameter: The uuid of the register
     * @param    pageSize    Optional parameter: The page size for the listing.  Defaults to 25, maximum value of 100
     * @param    pageNumber    Optional parameter: The page number for the listing.  Defaults to 1.
     * @return    Returns the List<StoredValueDailyTransaction> response from the API call 
     */
    public List<StoredValueDailyTransaction> getStoreRegisterDailyTransactionsByStoreId(
                final String authorization,
                final String storeId,
                final String registerId,
                final Integer pageSize,
                final Integer pageNumber
    ) throws Throwable {
        APICallBackCatcher<List<StoredValueDailyTransaction>> callback = new APICallBackCatcher<List<StoredValueDailyTransaction>>();
        getStoreRegisterDailyTransactionsByStoreIdAsync(authorization, storeId, registerId, pageSize, pageNumber, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Gets a paged, filtered, sorted list of aggregated daily transactions for a register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register
     * @param    registerId    Required parameter: The uuid of the register
     * @param    pageSize    Optional parameter: The page size for the listing.  Defaults to 25, maximum value of 100
     * @param    pageNumber    Optional parameter: The page number for the listing.  Defaults to 1.
     * @return    Returns the void response from the API call 
     */
    public void getStoreRegisterDailyTransactionsByStoreIdAsync(
                final String authorization,
                final String storeId,
                final String registerId,
                final Integer pageSize,
                final Integer pageNumber,
                final APICallBack<List<StoredValueDailyTransaction>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/register/{register-id}/daily-transactions");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4723655153406644730L;
            {
                    put( "store-id", storeId );
                    put( "register-id", registerId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5333972985694727060L;
            {
                    put( "page_size", pageSize );
                    put( "page_number", pageNumber );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5222689167238903383L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<StoredValueDailyTransaction> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<StoredValueDailyTransaction>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Gets the current balance of one or more registers by external account id
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register.
     * @param    externalId    Required parameter: The external account id associated with the register
     * @return    Returns the List<RegisterBalance> response from the API call 
     */
    public List<RegisterBalance> getStoreExternalAccountIdBalanceByStoreId(
                final String authorization,
                final String storeId,
                final String externalId
    ) throws Throwable {
        APICallBackCatcher<List<RegisterBalance>> callback = new APICallBackCatcher<List<RegisterBalance>>();
        getStoreExternalAccountIdBalanceByStoreIdAsync(authorization, storeId, externalId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Gets the current balance of one or more registers by external account id
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register.
     * @param    externalId    Required parameter: The external account id associated with the register
     * @return    Returns the void response from the API call 
     */
    public void getStoreExternalAccountIdBalanceByStoreIdAsync(
                final String authorization,
                final String storeId,
                final String externalId,
                final APICallBack<List<RegisterBalance>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/external-account-id/{external-id}/balance");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4812260471078462933L;
            {
                    put( "store-id", storeId );
                    put( "external-id", externalId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5611945794275326426L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<RegisterBalance> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<RegisterBalance>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Gets the earliest transaction date (contribution or consumption) on a store
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid for the store
     * @return    Returns the StoreDateRange response from the API call 
     */
    public StoreDateRange getStoreTransactionDateRangeByStoreId(
                final String authorization,
                final String storeId
    ) throws Throwable {
        APICallBackCatcher<StoreDateRange> callback = new APICallBackCatcher<StoreDateRange>();
        getStoreTransactionDateRangeByStoreIdAsync(authorization, storeId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Gets the earliest transaction date (contribution or consumption) on a store
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid for the store
     * @return    Returns the void response from the API call 
     */
    public void getStoreTransactionDateRangeByStoreIdAsync(
                final String authorization,
                final String storeId,
                final APICallBack<StoreDateRange> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/transaction-date-range");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5304482933772245993L;
            {
                    put( "store-id", storeId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5759494297571086959L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            StoreDateRange _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<StoreDateRange>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Gets a paged, filtered, sorted list of transactions for a register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register
     * @param    registerId    Required parameter: The uuid of the register
     * @param    sort    Optional parameter: The sort field to sort on
     * @param    sortDirection    Optional parameter: The direction of the sort
     * @param    txnId    Optional parameter: The txn_id to filter on
     * @param    txnDate    Optional parameter: A date to filter on
     * @param    txnSourceId    Optional parameter: A source id to filter on
     * @param    txnSourceType    Optional parameter: The source_type of the transaction.
     * @param    txnDirection    Optional parameter: The direction of the transaction.
     * @param    pageSize    Optional parameter: The page size for the listing.  Defaults to 25, maximum value of 100
     * @param    pageNumber    Optional parameter: The page number for the listing.  Defaults to 1.
     * @return    Returns the List<StoredValueTransaction> response from the API call 
     */
    public List<StoredValueTransaction> getStoreRegisterTransactionsByStoreId(
                final String authorization,
                final String storeId,
                final String registerId,
                final SortEnum sort,
                final SortDirectionEnum sortDirection,
                final Long txnId,
                final Date txnDate,
                final String txnSourceId,
                final String txnSourceType,
                final TxnDirectionEnum txnDirection,
                final Integer pageSize,
                final Integer pageNumber
    ) throws Throwable {
        APICallBackCatcher<List<StoredValueTransaction>> callback = new APICallBackCatcher<List<StoredValueTransaction>>();
        getStoreRegisterTransactionsByStoreIdAsync(authorization, storeId, registerId, sort, sortDirection, txnId, txnDate, txnSourceId, txnSourceType, txnDirection, pageSize, pageNumber, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Gets a paged, filtered, sorted list of transactions for a register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that owns the register
     * @param    registerId    Required parameter: The uuid of the register
     * @param    sort    Optional parameter: The sort field to sort on
     * @param    sortDirection    Optional parameter: The direction of the sort
     * @param    txnId    Optional parameter: The txn_id to filter on
     * @param    txnDate    Optional parameter: A date to filter on
     * @param    txnSourceId    Optional parameter: A source id to filter on
     * @param    txnSourceType    Optional parameter: The source_type of the transaction.
     * @param    txnDirection    Optional parameter: The direction of the transaction.
     * @param    pageSize    Optional parameter: The page size for the listing.  Defaults to 25, maximum value of 100
     * @param    pageNumber    Optional parameter: The page number for the listing.  Defaults to 1.
     * @return    Returns the void response from the API call 
     */
    public void getStoreRegisterTransactionsByStoreIdAsync(
                final String authorization,
                final String storeId,
                final String registerId,
                final SortEnum sort,
                final SortDirectionEnum sortDirection,
                final Long txnId,
                final Date txnDate,
                final String txnSourceId,
                final String txnSourceType,
                final TxnDirectionEnum txnDirection,
                final Integer pageSize,
                final Integer pageNumber,
                final APICallBack<List<StoredValueTransaction>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/register/{register-id}/transactions");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5283279479759233933L;
            {
                    put( "store-id", storeId );
                    put( "register-id", registerId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5681402398578146283L;
            {
                    put( "sort", (null != sort) ? sort.value() : "txn_id" );
                    put( "sort_direction", (null != sortDirection) ? sortDirection.value() : "desc" );
                    put( "txn_id", txnId );
                    put( "txn_date", txnDate );
                    put( "txn_source_id", txnSourceId );
                    put( "txn_source_type", txnSourceType );
                    put( "txn_direction", (null != txnDirection) ? txnDirection.value() : null );
                    put( "page_size", pageSize );
                    put( "page_number", pageNumber );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5444474343870705986L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<StoredValueTransaction> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<StoredValueTransaction>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Updates a balance register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that is updating the register.
     * @param    registerId    Required parameter: The uuid of the register being updated
     * @param    register    Required parameter: Example: 
     * @return    Returns the StoredValueRegister response from the API call 
     */
    public StoredValueRegister updateStoreRegisterByStoreIdAndRegisterId(
                final String authorization,
                final String storeId,
                final String registerId,
                final StoredValueRegister register
    ) throws Throwable {
        APICallBackCatcher<StoredValueRegister> callback = new APICallBackCatcher<StoredValueRegister>();
        updateStoreRegisterByStoreIdAndRegisterIdAsync(authorization, storeId, registerId, register, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Updates a balance register
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid of the store that is updating the register.
     * @param    registerId    Required parameter: The uuid of the register being updated
     * @param    register    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void updateStoreRegisterByStoreIdAndRegisterIdAsync(
                final String authorization,
                final String storeId,
                final String registerId,
                final StoredValueRegister register,
                final APICallBack<StoredValueRegister> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/register/{register-id}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4864420583331848826L;
            {
                    put( "store-id", storeId );
                    put( "register-id", registerId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4618891171421372727L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(register));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            StoredValueRegister _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<StoredValueRegister>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}