/*
 * SVSLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/15/2016
 */
package com.gotransverse.svs.webhook.client.models;

import java.util.*;

public class ExportRegisterBalanceBuilder {
    //the instance to build
    private ExportRegisterBalance exportRegisterBalance;

    /**
     * Default constructor to initialize the instance
     */
    public ExportRegisterBalanceBuilder() {
        exportRegisterBalance = new ExportRegisterBalance();
    }

    /**
     * A unique identifier for this record.
     */
    public ExportRegisterBalanceBuilder uuid(String uuid) {
        exportRegisterBalance.setUuid(uuid);
        return this;
    }

    /**
     * The internal register id for the register.
     */
    public ExportRegisterBalanceBuilder registerId(Long registerId) {
        exportRegisterBalance.setRegisterId(registerId);
        return this;
    }

    /**
     * The register type per the initial register setup.
     */
    public ExportRegisterBalanceBuilder registerType(String registerType) {
        exportRegisterBalance.setRegisterType(registerType);
        return this;
    }

    /**
     * The currency code based upon ISO 4217
     */
    public ExportRegisterBalanceBuilder registerCurrency(CurrencyEnum registerCurrency) {
        exportRegisterBalance.setRegisterCurrency(registerCurrency);
        return this;
    }

    /**
     * The register's unit of measure
     */
    public ExportRegisterBalanceBuilder registerUom(String registerUom) {
        exportRegisterBalance.setRegisterUom(registerUom);
        return this;
    }

    /**
     * The register's external account id.
     */
    public ExportRegisterBalanceBuilder registerAccountId(Long registerAccountId) {
        exportRegisterBalance.setRegisterAccountId(registerAccountId);
        return this;
    }

    /**
     * The register's external account number.
     */
    public ExportRegisterBalanceBuilder registerAccountNumber(String registerAccountNumber) {
        exportRegisterBalance.setRegisterAccountNumber(registerAccountNumber);
        return this;
    }

    /**
     * The category of the register associated with this balance
     */
    public ExportRegisterBalanceBuilder registerCategory(String registerCategory) {
        exportRegisterBalance.setRegisterCategory(registerCategory);
        return this;
    }

    /**
     * The total amount of the balance on the register
     */
    public ExportRegisterBalanceBuilder balanceAmount(Double balanceAmount) {
        exportRegisterBalance.setBalanceAmount(balanceAmount);
        return this;
    }

    /**
     * The total number of transactions on the register
     */
    public ExportRegisterBalanceBuilder balanceCount(Integer balanceCount) {
        exportRegisterBalance.setBalanceCount(balanceCount);
        return this;
    }

    /**
     * The total amount of the consumption balance on the register
     */
    public ExportRegisterBalanceBuilder consumptionBalanceAmount(Double consumptionBalanceAmount) {
        exportRegisterBalance.setConsumptionBalanceAmount(consumptionBalanceAmount);
        return this;
    }

    /**
     * The total number of consumption transactions on the register
     */
    public ExportRegisterBalanceBuilder consumptionBalanceCount(Integer consumptionBalanceCount) {
        exportRegisterBalance.setConsumptionBalanceCount(consumptionBalanceCount);
        return this;
    }

    /**
     * The total amount of the contribution balance on the register
     */
    public ExportRegisterBalanceBuilder contributionBalanceAmount(Double contributionBalanceAmount) {
        exportRegisterBalance.setContributionBalanceAmount(contributionBalanceAmount);
        return this;
    }

    /**
     * The total number of contribution transactions on the register
     */
    public ExportRegisterBalanceBuilder contributionBalanceCount(Integer contributionBalanceCount) {
        exportRegisterBalance.setContributionBalanceCount(contributionBalanceCount);
        return this;
    }

    /**
     * The total amount of unallocated consumption on the register
     */
    public ExportRegisterBalanceBuilder unallocatedConsumptionBalanceAmount(Double unallocatedConsumptionBalanceAmount) {
        exportRegisterBalance.setUnallocatedConsumptionBalanceAmount(unallocatedConsumptionBalanceAmount);
        return this;
    }

    /**
     * The unallocated date based upon the business entity's timezone in YYYY-MM-DD format.
     */
    public ExportRegisterBalanceBuilder asOfDate(Date asOfDate) {
        exportRegisterBalance.setAsOfDate(asOfDate);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public ExportRegisterBalance build() {
        return exportRegisterBalance;
    }
}