/*
 * SVSLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/15/2016
 */
package com.gotransverse.svs.webhook.client.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;

import com.gotransverse.svs.webhook.client.*;
import com.gotransverse.svs.webhook.client.models.*;
import com.gotransverse.svs.webhook.client.exceptions.*;
import com.gotransverse.svs.webhook.client.http.client.HttpClient;
import com.gotransverse.svs.webhook.client.http.client.HttpContext;
import com.gotransverse.svs.webhook.client.http.request.HttpRequest;
import com.gotransverse.svs.webhook.client.http.response.HttpResponse;
import com.gotransverse.svs.webhook.client.http.response.HttpStringResponse;
import com.gotransverse.svs.webhook.client.http.client.APICallBack;
import com.gotransverse.svs.webhook.client.controllers.syncwrapper.APICallBackCatcher;

public class DataExportController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static DataExportController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the DataExportController class 
     */
    public static DataExportController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new DataExportController();
            }
        }
        return instance;
    }

    /**
     * Retrieves balances by register as of a given date
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid for the store
     * @param    timeZone    Required parameter: The name of the timezone.
     * @param    asOfDate    Required parameter: The as of date to return records for. YYYY-MM-DD format
     * @return    Returns the List<ExportRegisterBalance> response from the API call 
     */
    public List<ExportRegisterBalance> getStoreRegistersExportDailyBalances(
                final String authorization,
                final String storeId,
                final TimezoneEnum timeZone,
                final Date asOfDate
    ) throws Throwable {
        APICallBackCatcher<List<ExportRegisterBalance>> callback = new APICallBackCatcher<List<ExportRegisterBalance>>();
        getStoreRegistersExportDailyBalancesAsync(authorization, storeId, timeZone, asOfDate, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieves balances by register as of a given date
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid for the store
     * @param    timeZone    Required parameter: The name of the timezone.
     * @param    asOfDate    Required parameter: The as of date to return records for. YYYY-MM-DD format
     * @return    Returns the void response from the API call 
     */
    public void getStoreRegistersExportDailyBalancesAsync(
                final String authorization,
                final String storeId,
                final TimezoneEnum timeZone,
                final Date asOfDate,
                final APICallBack<List<ExportRegisterBalance>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/registers/export/daily-balances");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4689670051332946738L;
            {
                    put( "store-id", storeId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4797309496145466759L;
            {
                    put( "time_zone", (null != timeZone) ? timeZone.value() : null );
                    put( "as_of_date", asOfDate );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5335662190881154029L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<ExportRegisterBalance> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<ExportRegisterBalance>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieves daily register balances as of a given date
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid for the store
     * @param    timeZone    Required parameter: The name of the timezone.
     * @param    asOfDate    Required parameter: The as of date to return records for. YYYY-MM-DD format
     * @return    Returns the List<ExportRegisterBalanceBySource> response from the API call 
     */
    public List<ExportRegisterBalanceBySource> getStoreRegistersExportDailyBalancesBySource(
                final String authorization,
                final String storeId,
                final TimezoneEnum timeZone,
                final Date asOfDate
    ) throws Throwable {
        APICallBackCatcher<List<ExportRegisterBalanceBySource>> callback = new APICallBackCatcher<List<ExportRegisterBalanceBySource>>();
        getStoreRegistersExportDailyBalancesBySourceAsync(authorization, storeId, timeZone, asOfDate, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieves daily register balances as of a given date
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid for the store
     * @param    timeZone    Required parameter: The name of the timezone.
     * @param    asOfDate    Required parameter: The as of date to return records for. YYYY-MM-DD format
     * @return    Returns the void response from the API call 
     */
    public void getStoreRegistersExportDailyBalancesBySourceAsync(
                final String authorization,
                final String storeId,
                final TimezoneEnum timeZone,
                final Date asOfDate,
                final APICallBack<List<ExportRegisterBalanceBySource>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/registers/export/daily-balances-by-source");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4959512030457896533L;
            {
                    put( "store-id", storeId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5181513252473410928L;
            {
                    put( "time_zone", (null != timeZone) ? timeZone.value() : null );
                    put( "as_of_date", asOfDate );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5358307782457840563L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<ExportRegisterBalanceBySource> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<ExportRegisterBalanceBySource>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieves a list of daily weighted consumptions for a given store
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid for the store
     * @param    timeZone    Required parameter: The name of the timezone.
     * @param    fromDate    Required parameter: The from date to export in YYYY-MM-DD format
     * @param    toDate    Required parameter: The to date to export in YYYY-MM-DD format
     * @return    Returns the List<ExportRegisterWeightedConsumptionBySource> response from the API call 
     */
    public List<ExportRegisterWeightedConsumptionBySource> getStoreRegistersExportDailyConsumptionsBySource(
                final String authorization,
                final String storeId,
                final TimezoneEnum timeZone,
                final Date fromDate,
                final Date toDate
    ) throws Throwable {
        APICallBackCatcher<List<ExportRegisterWeightedConsumptionBySource>> callback = new APICallBackCatcher<List<ExportRegisterWeightedConsumptionBySource>>();
        getStoreRegistersExportDailyConsumptionsBySourceAsync(authorization, storeId, timeZone, fromDate, toDate, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieves a list of daily weighted consumptions for a given store
     * @param    authorization    Required parameter: A token that indicates a user has been previously authorized to perform an action in the system.  Passed in the form of a bearer token without encoding, e.g. `Bearer abcd123456789efghiljklmnoqrstuvwkxz`
     * @param    storeId    Required parameter: The uuid for the store
     * @param    timeZone    Required parameter: The name of the timezone.
     * @param    fromDate    Required parameter: The from date to export in YYYY-MM-DD format
     * @param    toDate    Required parameter: The to date to export in YYYY-MM-DD format
     * @return    Returns the void response from the API call 
     */
    public void getStoreRegistersExportDailyConsumptionsBySourceAsync(
                final String authorization,
                final String storeId,
                final TimezoneEnum timeZone,
                final Date fromDate,
                final Date toDate,
                final APICallBack<List<ExportRegisterWeightedConsumptionBySource>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/store/{store-id}/registers/export/daily-consumptions-by-source");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5602412877973448997L;
            {
                    put( "store-id", storeId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4820390746681173232L;
            {
                    put( "time_zone", (null != timeZone) ? timeZone.value() : null );
                    put( "from_date", fromDate );
                    put( "to_date", toDate );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4679325664159371283L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", authorization );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorException("Authentication failed", _context);

                            else if (_responseCode == 403)
                                throw new ErrorException("Access denied", _context);

                            else if (_responseCode == 404)
                                throw new ErrorException("Entity not found", _context);

                            else if (_responseCode == 422)
                                throw new ErrorException("Validation failure", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<ExportRegisterWeightedConsumptionBySource> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<ExportRegisterWeightedConsumptionBySource>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}