/*
 * SVSLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/15/2016
 */
package com.gotransverse.svs.webhook.client.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class StoredValueDailyTransaction 
        implements java.io.Serializable {
    private static final long serialVersionUID = 4619722179480987910L;
    private Double totalAmount;
    private String registerUom;
    private DirectionEnum direction;
    private Long count;
    private Integer year;
    private Integer month;
    private Integer day;
    private String timezoneOffset;
    /** GETTER
     * The total amount of the transactions that makes up this daily aggregate.  Can be negative.
     */
    @JsonGetter("total_amount")
    public Double getTotalAmount ( ) { 
        return this.totalAmount;
    }
    
    /** SETTER
     * The total amount of the transactions that makes up this daily aggregate.  Can be negative.
     */
    @JsonSetter("total_amount")
    public void setTotalAmount (Double value) { 
        this.totalAmount = value;
    }
 
    /** GETTER
     * The unit of measure for register
     */
    @JsonGetter("register_uom")
    public String getRegisterUom ( ) { 
        return this.registerUom;
    }
    
    /** SETTER
     * The unit of measure for register
     */
    @JsonSetter("register_uom")
    public void setRegisterUom (String value) { 
        this.registerUom = value;
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("direction")
    public DirectionEnum getDirection ( ) { 
        return this.direction;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("direction")
    public void setDirection (DirectionEnum value) { 
        this.direction = value;
    }
 
    /** GETTER
     * The total number of transactions that make up this daily aggregate.
     */
    @JsonGetter("count")
    public Long getCount ( ) { 
        return this.count;
    }
    
    /** SETTER
     * The total number of transactions that make up this daily aggregate.
     */
    @JsonSetter("count")
    public void setCount (Long value) { 
        this.count = value;
    }
 
    /** GETTER
     * The year portion of the date for this aggregate
     */
    @JsonGetter("year")
    public Integer getYear ( ) { 
        return this.year;
    }
    
    /** SETTER
     * The year portion of the date for this aggregate
     */
    @JsonSetter("year")
    public void setYear (Integer value) { 
        this.year = value;
    }
 
    /** GETTER
     * The month portion of the date for this aggregate.  Values from 1 to 12.
     */
    @JsonGetter("month")
    public Integer getMonth ( ) { 
        return this.month;
    }
    
    /** SETTER
     * The month portion of the date for this aggregate.  Values from 1 to 12.
     */
    @JsonSetter("month")
    public void setMonth (Integer value) { 
        this.month = value;
    }
 
    /** GETTER
     * The day portion of the date for this aggregate.  Values from 1 to 31.
     */
    @JsonGetter("day")
    public Integer getDay ( ) { 
        return this.day;
    }
    
    /** SETTER
     * The day portion of the date for this aggregate.  Values from 1 to 31.
     */
    @JsonSetter("day")
    public void setDay (Integer value) { 
        this.day = value;
    }
 
    /** GETTER
     * The timezone offset of the dates included in this aggregate.  E.g. UTC-0400 is GMT-4.
     */
    @JsonGetter("timezone_offset")
    public String getTimezoneOffset ( ) { 
        return this.timezoneOffset;
    }
    
    /** SETTER
     * The timezone offset of the dates included in this aggregate.  E.g. UTC-0400 is GMT-4.
     */
    @JsonSetter("timezone_offset")
    public void setTimezoneOffset (String value) { 
        this.timezoneOffset = value;
    }
 
}
 