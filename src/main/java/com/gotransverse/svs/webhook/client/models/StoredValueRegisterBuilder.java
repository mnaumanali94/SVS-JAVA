/*
 * SVSLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/15/2016
 */
package com.gotransverse.svs.webhook.client.models;

import java.util.*;

public class StoredValueRegisterBuilder {
    //the instance to build
    private StoredValueRegister storedValueRegister;

    /**
     * Default constructor to initialize the instance
     */
    public StoredValueRegisterBuilder() {
        storedValueRegister = new StoredValueRegister();
    }

    /**
     * The globally unique identifier for the register.  Generated by service if not passed in.
     */
    public StoredValueRegisterBuilder uuid(String uuid) {
        storedValueRegister.setUuid(uuid);
        return this;
    }

    /**
     * An optional name for this register.
     */
    public StoredValueRegisterBuilder name(String name) {
        storedValueRegister.setName(name);
        return this;
    }

    /**
     * The unit of measure for which the register is tracking value.  Can only be updated if there are no transactions for this register.
     */
    public StoredValueRegisterBuilder grantedUnitOfMeasure(GrantedUnitOfMeasureEnum grantedUnitOfMeasure) {
        storedValueRegister.setGrantedUnitOfMeasure(grantedUnitOfMeasure);
        return this;
    }

    /**
     * The currency code based upon ISO 4217
     */
    public StoredValueRegisterBuilder currency(CurrencyEnum currency) {
        storedValueRegister.setCurrency(currency);
        return this;
    }

    /**
     * An optional description for this register.
     */
    public StoredValueRegisterBuilder description(String description) {
        storedValueRegister.setDescription(description);
        return this;
    }

    /**
     * An optional external account id for this register for cross referencing purposes.
     */
    public StoredValueRegisterBuilder externalAccountId(String externalAccountId) {
        storedValueRegister.setExternalAccountId(externalAccountId);
        return this;
    }

    /**
     * An optional external account number for this register for cross referencing purposes.
     */
    public StoredValueRegisterBuilder externalAccountNumber(String externalAccountNumber) {
        storedValueRegister.setExternalAccountNumber(externalAccountNumber);
        return this;
    }

    /**
     * An optional external account name for this register for cross referencing purposes.
     */
    public StoredValueRegisterBuilder externalAccountName(String externalAccountName) {
        storedValueRegister.setExternalAccountName(externalAccountName);
        return this;
    }

    /**
     * An optional external company name for this register for cross referencing purposes.
     */
    public StoredValueRegisterBuilder externalCompanyName(String externalCompanyName) {
        storedValueRegister.setExternalCompanyName(externalCompanyName);
        return this;
    }

    /**
     * An optional external category for this register for cross referencing purposes.
     */
    public StoredValueRegisterBuilder externalCategory(String externalCategory) {
        storedValueRegister.setExternalCategory(externalCategory);
        return this;
    }

    /**
     * An optional amount this register can be overdrawn.
     */
    public StoredValueRegisterBuilder overdraftAmount(Double overdraftAmount) {
        storedValueRegister.setOverdraftAmount(overdraftAmount);
        return this;
    }

    /**
     * Indicates if automatic contribution is enabled for this register.
     */
    public StoredValueRegisterBuilder autoContributionEnabled(Boolean autoContributionEnabled) {
        storedValueRegister.setAutoContributionEnabled(autoContributionEnabled);
        return this;
    }

    /**
     * A balance level at which to trigger an automatic contribution.
     */
    public StoredValueRegisterBuilder autoContributionThreshold(Double autoContributionThreshold) {
        storedValueRegister.setAutoContributionThreshold(autoContributionThreshold);
        return this;
    }

    /**
     * The amount to add on an automatic contribution.
     */
    public StoredValueRegisterBuilder autoContributionAmount(Double autoContributionAmount) {
        storedValueRegister.setAutoContributionAmount(autoContributionAmount);
        return this;
    }

    /**
     * The granted value to add on an automatic contribution.
     */
    public StoredValueRegisterBuilder autoContributionGrantedValue(Double autoContributionGrantedValue) {
        storedValueRegister.setAutoContributionGrantedValue(autoContributionGrantedValue);
        return this;
    }

    public StoredValueRegisterBuilder autoContributionProductEid(Long autoContributionProductEid) {
        storedValueRegister.setAutoContributionProductEid(autoContributionProductEid);
        return this;
    }

    /**
     * The type of this register.  Used to differentiate between multiple registers that might be on a given external account.
     */
    public StoredValueRegisterBuilder registerType(String registerType) {
        storedValueRegister.setRegisterType(registerType);
        return this;
    }

    /**
     * A timezone name per the official tz database.
     */
    public StoredValueRegisterBuilder timezoneName(TimezoneEnum timezoneName) {
        storedValueRegister.setTimezoneName(timezoneName);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public StoredValueRegister build() {
        return storedValueRegister;
    }
}