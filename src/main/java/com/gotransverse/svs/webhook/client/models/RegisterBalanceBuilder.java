/*
 * SVSLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/15/2016
 */
package com.gotransverse.svs.webhook.client.models;

import java.util.*;

public class RegisterBalanceBuilder {
    //the instance to build
    private RegisterBalance registerBalance;

    /**
     * Default constructor to initialize the instance
     */
    public RegisterBalanceBuilder() {
        registerBalance = new RegisterBalance();
    }

    /**
     * An object to track a set of transactions around for stored value.
     */
    public RegisterBalanceBuilder register(StoredValueRegister register) {
        registerBalance.setRegister(register);
        return this;
    }

    /**
     * The category of the register associated with this balance
     */
    public RegisterBalanceBuilder registerCategory(String registerCategory) {
        registerBalance.setRegisterCategory(registerCategory);
        return this;
    }

    /**
     * The total amount of the balance on the register
     */
    public RegisterBalanceBuilder balanceAmount(Double balanceAmount) {
        registerBalance.setBalanceAmount(balanceAmount);
        return this;
    }

    /**
     * The total number of transactions on the register
     */
    public RegisterBalanceBuilder balanceCount(Integer balanceCount) {
        registerBalance.setBalanceCount(balanceCount);
        return this;
    }

    /**
     * The total amount of the consumption balance on the register
     */
    public RegisterBalanceBuilder consumptionBalanceAmount(Double consumptionBalanceAmount) {
        registerBalance.setConsumptionBalanceAmount(consumptionBalanceAmount);
        return this;
    }

    /**
     * The total number of consumption transactions on the register
     */
    public RegisterBalanceBuilder consumptionBalanceCount(Integer consumptionBalanceCount) {
        registerBalance.setConsumptionBalanceCount(consumptionBalanceCount);
        return this;
    }

    /**
     * The total amount of the contribution balance on the register
     */
    public RegisterBalanceBuilder contributionBalanceAmount(Double contributionBalanceAmount) {
        registerBalance.setContributionBalanceAmount(contributionBalanceAmount);
        return this;
    }

    /**
     * The total number of contribution transactions on the register
     */
    public RegisterBalanceBuilder contributionBalanceCount(Integer contributionBalanceCount) {
        registerBalance.setContributionBalanceCount(contributionBalanceCount);
        return this;
    }

    /**
     * The maximum effective date of the balance
     */
    public RegisterBalanceBuilder maxEffectiveDate(Date maxEffectiveDate) {
        registerBalance.setMaxEffectiveDate(maxEffectiveDate);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public RegisterBalance build() {
        return registerBalance;
    }
}